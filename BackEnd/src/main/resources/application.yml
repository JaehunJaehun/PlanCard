spring:
  jpa:
    open-in-view: false
    defer-datasource-initialization: true
    generate-ddl: true
    hibernate:
      ddl-auto: create-drop                # ddl 자동 작성 여부
    properties:
      hibernate:
        format_sql: true             # 하이버네이트가 실행한 SQL을 출력할 때 보기 좋게 정렬
        use_sql_comments: true
        show_sql: true               # 하이버네이트가 실행한 SQL을 출력
        jdbc:
          batch_size: 100              #   insert/update 쿼리를 원하는 개수만큼 모아서 DB에 날릴 수 있는 옵션
        default_batch_fetch_size: 100

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver  # DB 드라이버
    url: jdbc:mysql://plancard-db.cts0808eovz6.ap-northeast-2.rds.amazonaws.com:3306/plancard_db       # RDS mysql
    username: admin                     # 데이터베이스 계정명
    password: ssafy1234                       # 데이터베이스 계정 비밀번호

  #    open-in-view: false

  #    properties:
  #      hibernate:
  #        format_sql: true             # 하이버네이트가 실행한 SQL을 출력할 때 보기 좋게 정렬
  #        use_sql_comments: true
  #        show_sql: true               # 하이버네이트가 실행한 SQL을 출력
  #        jdbc:
  #          batch_size: 100              #   insert/update 쿼리를 원하는 개수만큼 모아서 DB에 날릴 수 있는 옵션
  #        default_batch_fetch_size: 100
  batch:
    jdbc:
      initialize-schema: always
    job:
      enabled: false

  # NoSQL setting
  data:
    # Redis setting
    redis:
      host: i10C110.p.ssafy.io
      port: 6379

    # mongodb setting
    mongodb:
      uri: mongodb://localhost:27017/planCard


  # Java Mail Sender setting (Google Mail)
  mail:
    host: smtp.gmail.com
    port: 587
    username: donggeun3484@gmail.com
    password: tbplnbqivtwteeki
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  # RabbitMQ setting
  rabbitmq:
    host: localhost  # RabbitMQ 서버 호스트
    port: 15672       # RabbitMQ 서버 포트, 기본값은 15672
    username: guest  # RabbitMQ 사용자 이름, 기본값은 guest
    password: guest  # RabbitMQ 비밀번호, 기본값은 guest
    virtual-host: /  # RabbitMQ 가상 호스트, 기본값은 /

# jwt setting
jwt:
  secret-key:
    access: TestAccessKey111111122222222223333333333333aaaaaaaaabbbbbbbbccccccccdddddddddfqwrqwfqwifjaisfjoihfoiqwflasjdglkkjasdlgjlkasdgjiowejgliasjglasjdgio
    refresh: TestRefreshKey111111122222222223333333333333aaaaaaaaabbbbbbbbccccccccdddddddddfqwrqwfqwifjaisfjoihfoiqwflasjdglkkjasdlgjlkasdgjiowejgliasjglasjdgio

  expired-min:
    access: 60   # 액세스 토큰 만료제한시간 60분 (1시간)
    refresh: 10080  # 리프레쉬 토큰 만료제한시간 10080분 (7일)

# log 관리
logging:
  level:
    org.hibernate:
      type.descriptor.sql: trace
      org.hibernate.SQLQuery: debug


# 공공데이터
public-data:
  key: 734364614c73656e32386579495665

stt:
  id: YrKMFxbs_H29nZ1cZs3r
  secret: -wXxmNVuqYD-F1_jNH7DRYgQOs0SlL8Vb2W2ArJR


server:
  ssl:
    enabled: false

openvidu:
  url: http://localhost:4443/
  secret: MY_SECRET


# OAUTH2.0 Setting
oauth:
  kakao:
    client-id: 8e8a2a929b0cbf786ac9567191ac7ff7
    client-secret: OaZuL5rd6IcxxcwDd4pgcKRnJP9afsHo
    redirect-uri: http://localhost:5173/member/loading/kakao
    scope:
      - profile_nickname
      - profile_image
      - account_email
      - name

  naver:
    client-id: d5K9OtbM_JbyOZIiOG54
    client-secret: UAm7jJPmsC
    redirect_uri: http://localhost:5173/member/loading/naver
    scope:
      - nickname
      - name
      - email
      - profile_image

# firebase setting
app:
  firebase-configuration-file: classpath:serviceAccountKey.json
  firebase-bucket: plancard-3b8f9.appspot.com